import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

world_data =pd.read_csv('WHO_COVID-19.csv')
world_data.head()

world_data.describe()

world_data.info()

india_data = world_data[(world_data['Name']=="India")]
india_data

europe_data = world_data[(world_data['WHO Region']=='Europe')]
europe_data

americas_data = world_data[(world_data['WHO Region']=='Americas')]
americas_data

world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data) 
  
name = df['Name'].head(5) 
cases = df['Cases - cumulative total'].head(5) 

plt.plot(name, cases) 
plt.xlabel("country ")  # add X-axis label 
plt.ylabel("total number of cases")  # add Y-axis label 
plt.title("Top country suffered with covid-19")  # add title 
plt.show()

world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data) 
  
name = df['Name'].head(5) 
cases = df['Cases - cumulative total'].head(5) 
  
# Figure Size 
fig = plt.figure(figsize =(10, 7)) 
  
# Horizontal Bar Plot 
plt.bar(name[0:10], cases[0:10]) 
  
# Show Plot 
plt.show()

world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data) 
  
name = df['Name'].head(10) 
cases = df['Cases - cumulative total'].head(10) 
  
# Figure Size 
fig, ax = plt.subplots(figsize =(16, 9)) 
  
# Horizontal Bar Plot 
ax.barh(name, cases) 
  
# Remove axes splines 
for s in ['top', 'bottom', 'left', 'right']: 
    ax.spines[s].set_visible(False) 
  
# Remove x, y Ticks 
ax.xaxis.set_ticks_position('none') 
ax.yaxis.set_ticks_position('none') 
  
# Add padding between axes and labels 
ax.xaxis.set_tick_params(pad = 5) 
ax.yaxis.set_tick_params(pad = 10) 
  
# Add x, y gridlines 
ax.grid(b = True, color ='grey', 
        linestyle ='-.', linewidth = 0.5, 
        alpha = 0.2) 
  
# Show top values  
ax.invert_yaxis() 
  
# Add annotation to bars 
for i in ax.patches: 
    plt.text(i.get_width()+0.2, i.get_y()+0.5,  
             str(round((i.get_width()), 2)), 
             fontsize = 10, fontweight ='bold', 
             color ='grey') 
  
# Add Plot Title 
ax.set_title('Total cases by country', 
             loc ='left', ) 
  
# Add Text watermark 
fig.text(0.9, 0.15, 'Ramp007', fontsize = 12, 
         color ='grey', ha ='right', va ='bottom', 
         alpha = 0.7) 
  
# Show Plot 
plot.show()

world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data)

name = df['Name'].head(10) 
cases = df['Cases - cumulative total'].head(10)

fig = plt.figure(figsize =(10, 7)) 
plt.pie(cases, labels = name) 
  
# show plot 
plt.show()


world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data)

name = df['Name'].head(6) 
cases = df['Cases - cumulative total'].head(6)

explode = (0.1, 0.0, 0.2, 0.3, 0.0, 0.0) 
  
# Creating color parameters 
colors = ( "orange", "cyan", "brown", 
          "grey", "indigo", "beige") 
  
# Wedge properties 
wp = { 'linewidth' : 1, 'edgecolor' : "green" } 
  
# Creating autocpt arguments 
def func(pct, allvalues): 
    absolute = int(pct / 100.*np.sum(allvalues)) 
    return "{:.1f}%\n({:d} g)".format(pct, absolute) 
  
# Creating plot 
fig, ax = plt.subplots(figsize =(10, 7)) 
wedges, texts, autotexts = ax.pie(cases,  
                                  autopct = lambda pct: func(pct, cases), 
                                  explode = explode,  
                                  labels = name, 
                                  shadow = True, 
                                  colors = colors, 
                                  startangle = 90, 
                                  wedgeprops = wp, 
                                  textprops = dict(color ="magenta")) 
  
# Adding legend 
ax.legend(wedges, name, 
          title ="name", 
          loc ="center left", 
          bbox_to_anchor =(1, 0, 0.5, 1)) 
  
plt.setp(autotexts, size = 8, weight ="bold") 
ax.set_title("Customizing pie chart") 
  
# show plot 
plt.show() 


world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data) 
  
name = df['Name'].head(5) 
cases = df['Deaths - cumulative total'].head(5) 
  
# Figure Size 
fig = plt.figure(figsize =(10, 7)) 
  
# Horizontal Bar Plot 
plt.bar(name[0:10], cases[0:10]) 
  
# Show Plot 
plt.show()



world_data = pd.read_csv("WHO_COVID-19.csv") 
world_data.head() 
df = pd.DataFrame(world_data)

name = df['Name'].head(10) 
deaths = df['Deaths - cumulative total'].head(10)

fig = plt.figure(figsize =(10, 7)) 
plt.pie(deaths, labels = name) 
  
# show plot 
plt.show()


americas_data = world_data[(world_data['WHO Region']=='Americas')]
americas_data

df = pd.DataFrame(americas_data) 
  
name = df['Name'].head(5) 
cases = df['Deaths - cumulative total'].head(5) 
  
# Figure Size 
fig = plt.figure(figsize =(10, 7)) 
  
# Horizontal Bar Plot 
plt.bar(name[0:10], cases[0:10]) 
  
# Show Plot 
plt.show()


df = pd.DataFrame(americas_data)

name = df['Name'].head(10) 
deaths = df['Deaths - cumulative total'].head(10)

fig = plt.figure(figsize =(10, 7)) 
plt.pie(deaths, labels = name) 
  
# show plot 
plt.show()



df = pd.DataFrame(americas_data)

name = df['Name'].head(10) 
cases = df['Cases - cumulative total'].head(10)

fig = plt.figure(figsize =(10, 7)) 
plt.pie(cases, labels = name) 
  
# show plot 
plt.show()



df = pd.DataFrame(americas_data) 
  
name = df['Name'].head(10) 
cases = df['Cases - cumulative total'].head(10) 
  
# Figure Size 
fig, ax = plt.subplots(figsize =(16, 9)) 
  
# Horizontal Bar Plot 
ax.barh(name, cases) 
  
# Remove axes splines 
for s in ['top', 'bottom', 'left', 'right']: 
    ax.spines[s].set_visible(False) 
  
# Remove x, y Ticks 
ax.xaxis.set_ticks_position('none') 
ax.yaxis.set_ticks_position('none') 
  
# Add padding between axes and labels 
ax.xaxis.set_tick_params(pad = 5) 
ax.yaxis.set_tick_params(pad = 10) 
  
# Add x, y gridlines 
ax.grid(b = True, color ='grey', 
        linestyle ='-.', linewidth = 0.5, 
        alpha = 0.2) 
  
# Show top values  
ax.invert_yaxis() 
  
# Add annotation to bars 
for i in ax.patches: 
    plt.text(i.get_width()+0.2, i.get_y()+0.5,  
             str(round((i.get_width()), 2)), 
             fontsize = 10, fontweight ='bold', 
             color ='grey') 
  
# Add Plot Title 
ax.set_title('Total cases by country', 
             loc ='left', ) 
  
# Add Text watermark 
fig.text(0.9, 0.15, 'Ramp007', fontsize = 12, 
         color ='grey', ha ='right', va ='bottom', 
         alpha = 0.7) 
  
# Show Plot 
plt.show() 


df = pd.DataFrame(americas_data) 
  
name = df['Name'].head(10) 
deaths = df['Deaths - cumulative total'].head(10) 
  
# Figure Size 
fig, ax = plt.subplots(figsize =(16, 9)) 
  
# Horizontal Bar Plot 
ax.barh(name, deaths) 
  
# Remove axes splines 
for s in ['top', 'bottom', 'left', 'right']: 
    ax.spines[s].set_visible(False) 
  
# Remove x, y Ticks 
ax.xaxis.set_ticks_position('none') 
ax.yaxis.set_ticks_position('none') 
  
# Add padding between axes and labels 
ax.xaxis.set_tick_params(pad = 5) 
ax.yaxis.set_tick_params(pad = 10) 
  
# Add x, y gridlines 
ax.grid(b = True, color ='grey', 
        linestyle ='-.', linewidth = 0.5, 
        alpha = 0.2) 
  
# Show top values  
ax.invert_yaxis() 
  
# Add annotation to bars 
for i in ax.patches: 
    plt.text(i.get_width()+0.2, i.get_y()+0.5,  
             str(round((i.get_width()), 2)), 
             fontsize = 10, fontweight ='bold', 
             color ='grey') 
  
# Add Plot Title 
ax.set_title('Total deaths by country', 
             loc ='left', ) 
  
# Add Text watermark 
fig.text(0.9, 0.15, 'Ramp007', fontsize = 12, 
         color ='grey', ha ='right', va ='bottom', 
         alpha = 0.7) 
  
# Show Plot 
plt.show() 




